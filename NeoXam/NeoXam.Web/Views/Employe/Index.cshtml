@model IEnumerable<NeoXam.Web.Models.TypeAlgo>
@using NeoXam.Web.Models

@{
    ViewBag.Title = "Index";
   Layout = "~/Views/Shared/_LayoutHome.cshtml";
    
}

<h2>Index</h2>


<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD6maRCH9aI1K0sWA_FRdjIQv9AJgP7aQ0&libraries=places,geometry" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.9.1/underscore-min.js" type="text/javascript"></script>
@*<script src="~/Scripts/jquery.unobtrusive-ajax.min.js" type="text/javascript"></script>*@
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>


<style type="text/css">
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        .switch input {
            display: none;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
        }

    /* include generated hidden field here */
    input[type="checkbox"]:checked + input[type="hidden"] + .slider,
    input[type="checkbox"]:checked + .slider {
        background-color: #2196F3;
    }

    /* include generated hidden field here */
    input[type="checkbox"]:focus + input[type="hidden"] + .slider,
    input[type="checkbox"]:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    /* include generated hidden field here */
    input[type="checkbox"]:checked + input[type="hidden"] + .slider:before,
    input[type="checkbox"]:checked + .slider:before {
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round2 {
        border-radius: 20px;
    }

        .slider.round2:before {
            border-radius: 50%;
        }
</style>


@Html.DropDownList("typeAlgorithme", new SelectList(Enum.GetValues(typeof(Gender)), Gender.Ward),"Veuillez choisir un algorithme:", new { @class = "form-control" })

<div>
    <h4>Addresse</h4>
</div>
<input type="text" id="clusterNumber_input" placeholder="Nombre des clusters">
@*<div class="form-group" style=" display inline-block;">
    @Html.Label("N° Maison", htmlAttributes: new { @class = "control-label col-md-12" })
    <div class="col-md-4">
        @Html.Editor("house_number", new { htmlAttributes = new { @class = "form-control" } })

    </div>
</div>

<div class="form-group" style=" display inline-block;">
    @Html.Label("Rue", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Editor("street", new { htmlAttributes = new { @class = "form-control" } })
    </div>
</div>

<div class="form-group" style=" display inline-block;">
    @Html.Label("Ville", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Editor("city", new { htmlAttributes = new { @class = "form-control" } })
    </div>
</div>

<div class="form-group" style=" display inline-block;">
    @Html.Label("Pay", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Editor("country", new { htmlAttributes = new { @class = "form-control" } })
    </div>
</div>

<div class="form-group" style=" display inline-block;">
    @Html.Label("Etat", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Editor("state", new { htmlAttributes = new { @class = "form-control" } })
    </div>
</div>

<div class="form-group col-md-1" style=" display inline-block;">
    @Html.Label("zipCode", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Editor("zipCode", new { htmlAttributes = new { @class = "form-control" } })
    </div>
</div>
@Html.Editor("lat")
@Html.Editor("lng")*@



<input type="button" value="Plein ecran" onclick="window.open('http://localhost:18080/NeoXamPiDev-web/Plot.png');">

<div id="dvMap" style="width:100%; height: 500px"></div>
<div id="directions-panel"></div>




<style>
    .k-detail-cell .k-tabstrip .k-content {
        padding: 0.2em;
    }

    .employee-details ul {
        list-style: none;
        font-style: italic;
        margin: 15px;
        padding: 0;
    }

        .employee-details ul li {
            margin: 0;
            line-height: 1.7em;
        }

    .employee-details label {
        display: inline-block;
        width: 90px;
        padding-right: 10px;
        text-align: right;
        font-style: normal;
        font-weight: bold;
    }
</style>

@*@section scripts{ @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js")}*@



<script type="text/javascript">

            var myMap;
            var directionsService = new google.maps.DirectionsService;
            var directionsDisplay = new google.maps.DirectionsRenderer;

            function extractFromAdress(components, type) {
                return components.filter((component) => component.types.indexOf(type) === 0).map((item) => item.long_name).pop() || null;
            }

            window.onload = function () {
                var mapOptions = {
                    center: new google.maps.LatLng(36.898935, 10.190087),
                    zoom: 14,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };
                var infoWindow = new google.maps.InfoWindow();
                var latlngbounds = new google.maps.LatLngBounds();
                var map = new google.maps.Map(document.getElementById("dvMap"), mapOptions);
                myMap = map;
                directionsDisplay.setMap(map);

//**************************************************************************MARKERS
            var markers = [];

            // This event listener will call addMarker() when the map is clicked.
            map.addListener('click', function (event) {
                //deleteMarkers();
                addMarker(event.latLng);
            });


            // This function takes in a COLOR, and then creates a new marker
            // icon of that color. The icon will be 21 px wide by 34 high, have an origin
            // of 0, 0 and be anchored at 10, 34).
            function makeMarkerIcon(markerColor) {
                var markerImage = new google.maps.MarkerImage(
                    'http://chart.googleapis.com/chart?chst=d_map_spin&chld=1.15|0|' +
                    markerColor +
                    '|40|_|%E2%80%A2',
                    new google.maps.Size(21, 34),
                    new google.maps.Point(0, 0),
                    new google.maps.Point(10, 34),
                    new google.maps.Size(21, 34));
                return markerImage;
            }

            var defaultIcon = makeMarkerIcon('0091ff');
           // var i = 0;
        // Adds a marker to the map and push to the array.****************************************************************
            function addMarker(location, i, elementOfResponse) {
                var color
                if (elementOfResponse!=null)
                   color = elementOfResponse.markerColor;
                else
                    color = "#000000";
          //console.log("location=" + location);
          var largeInfowindow = new google.maps.InfoWindow();

          var NewMarker = new google.maps.Marker
              ({
                position: location,
                map: map,
                //icon: defaultIcon,
                icon:
                    {
                        path: google.maps.SymbolPath.CIRCLE,
                        scale: 8.5,
                        fillColor: color,
                        fillOpacity: 0.4,
                        strokeWeight: 0.4
                    },
                //animation: google.maps.Animation.DROP,
                //title: i,
                //id: i
              });


            markers.push(NewMarker);
            NewMarker.addListener('click', function () { populateInfoWindow(this, largeInfowindow, elementOfResponse); });
            NewMarker.addListener('mouseover', function () {
                this.setIcon({
                    path: google.maps.SymbolPath.CIRCLE,
                    scale: 10,
                    fillColor: color,
                    fillOpacity: 1,
                    strokeWeight: 0.4
                });
            });
            NewMarker.addListener('mouseout', function () {
                this.setIcon({
                    path: google.maps.SymbolPath.CIRCLE,
                    scale: 8.5,
                    fillColor: color,
                    fillOpacity: 0.4,
                    strokeWeight: 0.4
                });
            });

            }

            // This function populates the infowindow when the marker is clicked. We'll only allow
            // one infowindow which will open at the marker that is clicked, and populate based
            // on that markers position.
            function populateInfoWindow(marker, infowindow, elementOfResponse)
            {
                // Check to make sure the infowindow is not already opened on this marker.
                if (infowindow.marker != marker) {
                    // Clear the infowindow content to give the streetview time to load.
                    infowindow.setContent('');
                    infowindow.marker = marker;
                    // Make sure the marker property is cleared if the infowindow is closed.
                    infowindow.addListener('closeclick', function () {
                        infowindow.marker = null;
                    });

                    infowindow.setContent('<div>' + "*CIN: " + elementOfResponse.CIN + '</div>' +
                                          '<div id="latlng">' + "*Latitude: " + elementOfResponse.lat + ", *Langitude: " +elementOfResponse.lng + '</div>'
                                          );


                    }

                    // Open the infowindow on the correct marker.
                    infowindow.open(map, marker);
           }



        // Sets the map on all markers in the array.
        function setMapOnAll(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }

        // Removes the markers from the map, but keeps them in the array.
        function clearMarkers() {
            setMapOnAll(null);
        }

        // Shows any markers currently in the array.
        function showMarkers() {
            setMapOnAll(map);
        }

        // Deletes all markers in the array by removing references to them.
        function deleteMarkers() {
            clearMarkers();
            markers = [];
        }
            //****************centroids
        function sortFunc(a, b) {
            var bearA = google.maps.geometry.spherical.computeHeading(centerPt, a);
            var bearB = google.maps.geometry.spherical.computeHeading(centerPt, b);
            //console.log(bearA + ":" + bearB);
            return (bearA - bearB);
        }
            //************************
        (function () {
            "use strict";

            var category = 'google.maps.Polygon.getCentroid';
            // check that the GMaps API was already loaded
            if (null == google || null == google.maps || null == google.maps.Polygon) {
                console.error(category, 'Google Maps API not found');
                return;
            }


            function getCentroid(path) {
                var self = this,
                    vertexes;

                if (!self instanceof google.maps.Polygon)
                    return;

                if (null === path)
                    throw new Error('Path is optional, but cannot be null');

                // default to the first path
                if (arguments.length === 0)
                    path = self.getPath();

                // support for passing an index number to a path
                if (typeof (path) === 'number')
                    path = self.getPaths().getAt(path);

                if ((!(path instanceof Array)) && (!(path instanceof google.maps.MVCArray)))
                    throw new Error('Path must be an Array or MVCArray');

                if (path instanceof google.maps.MVCArray)
                    vertexes = path.getArray();

                vertexes = closeVertexes(vertexes);

                return calculate(vertexes);
            }


            function getCentroids() {
                var self = this,
                    centroids = [];

                if (!self instanceof google.maps.Polygon)
                    return;

                self.getPaths().forEach(function (path) {
                    centroids.push(self.getCentroid(path));
                });

                return centroids;
            }


            // ensures that vertex of point N is the same as point 0 in a polygon
            // this is necessary since the Google Maps API v3 will implicitly connect the
            // last and first vertex
            function closeVertexes(vertexes) {
                // HACK: clone the array via Array#splice
                var result = vertexes.slice(0),
                    length = result.length;

                if (!result[0].equals(result[length - 1])) {
                    result.push(result[0]);
                }

                return result;
            }


            function calculate(vertexes) {
                var coefficient,
                    crossProduct,
                    area = 0,
                    x = 0, // centroid longitude
                    y = 0, // centroid latitude
                    x1,
                    x2,
                    y1,
                    y2;

                // nothing to do if we are passed null, or an array with fewer than 4 points
                // 4 points are needed to define a triangle, since the first and last point must be the same
                // anything smaller than 4 points is just a line segment, a single point, or null
                if (vertexes == null || vertexes.length < 4)
                    return;

                // HACK: initialize the lat2/lng2 variables so that we can avoid calling the
                // lat/lng properties twice for each vertex inside the loop
                y2 = vertexes[0].lat();
                x2 = vertexes[0].lng();

                // could use Array#reduce here, but, a simple for loop seems to make more
                // sense; a for loop lets us process the centroid X and centroid Y in one pass
                for (var i = 0, length = vertexes.length - 1; i < length; i++) {
                    y1 = y2;
                    x1 = x2;
                    y2 = vertexes[i + 1].lat();
                    x2 = vertexes[i + 1].lng();

                    // the crossProduct is a common value to both the X and Y calculations
                    crossProduct = (x1 * y2) - (x2 * y1);
                    area += crossProduct;
                    x += (x1 + x2) * crossProduct;
                    y += (y1 + y2) * crossProduct;
                }

                area *= 0.5;
                // calculate 1 / 6A where A is the signed area
                coefficient = 1 / (6 * area);

                x *= coefficient;
                y *= coefficient;

                return new google.maps.LatLng(y, x);
            }

            if (typeof (google.maps.Polygon.prototype.getCentroid) !== 'function') {
                google.maps.Polygon.prototype.getCentroid = getCentroid;
            }

            if (typeof (google.maps.Polygon.prototype.getCentroids) !== 'function') {
                google.maps.Polygon.prototype.getCentroids = getCentroids;
            }
        })();

            //**************************************************************************MARKERS

        var i = 0;
        var polygons = [];
        var arr = new Array();
        var centroidsMarkersArray = new Array();

        $("#clusterNumber_input").keyup(function () {
            var x = $("#clusterNumber_input").val();
            var y = $("#typeAlgorithme").val();
            if (x == null || x == 0 || x == 1)
                x = 3;

            

            console.log("Ajax************************************************************************************************************");
            $.ajax({
                url: "http://localhost:43725/User/GetUserList",
                type: "GET",
                dataType: "json",
                data: { 'clusterNumber': x, 'typeAlgo': y },
                success: function (response) {

                    //console.log(response);
                    deleteMarkers();
                    centroidsMarkersArray = [];
                    directionsDisplay.setMap(null);
                    directionsDisplay = new google.maps.DirectionsRenderer;
                    directionsDisplay.setMap(map);


                    //for (var i = 0; i < response.length; i++) {
                    //    //Get the position from the location array.
                    //    if (response[i].address != null) {
                    //        var lat = response[i].address.lat;
                    //        var lng = response[i].address.lng;
                    //        //console.log("lat=" + lat);
                    //        var location = new google.maps.LatLng(lat, lng);

                    //        addMarker(location, i, response[i]);



                    //}
                    //}

                    ////var flags = {};
                    ////var newPlaces = response.filter(function (entry) {
                    ////    if (flags[entry.address.markerColor]) {
                    ////        return false;
                    ////    }
                    ////    flags[entry.address.markerColor] = true;
                    ////    return true;
                    ////});



                    var listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty = _.groupBy(response, function (currentObject) {
                        return currentObject.markerColor;
                    });

                    //console.log(listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty);


                    //for (var element in listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty) //affiche #00ff00 #ff0000 #0000ff
                    //{
                    //    console.log(element);
                    //}

                    console.log("avant set polygon null");
                    for (var polygon in polygons) {
                        console.log("polygon=" + polygon);
                        polygons[polygon].setMap(null);
                    }

                    i = 0;


                    //for (var element in listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty) //affiche les 3 tableau des 3 couleurs
                    //{
                    //    console.log(listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[element]);
                    //}

                    console.log("listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty=" + JSON.stringify(listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty));

                    for (var color in listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty) {
                        console.log(color);
                        arr = [];
                        var bounds = new google.maps.LatLngBounds();

                        if (listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color] != null)
                            for (var employee in listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])// employee=0 , 1 .... keys correspending to the objects of type employee(Admin)
                            {

                                if ((((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])) != null) {
                                    var lat = (((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])["lat"]);
                                    var lng = (((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])["lng"]);
                                    var location = new google.maps.LatLng(lat, lng);
                                    addMarker(location, i, ((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee]));
                                    arr.push(location);
                                    bounds.extend(location);
                                    console.log("LatLng=" + lat + "/" + lng);
                                    i++;

                                }



                            }
                        centerPt = bounds.getCenter();
                        var centerPtMarker = new google.maps.Marker
                                      ({
                                          position: centerPt,
                                          map: map,
                                      });
                        markers.push(centerPtMarker);

                        centroidsMarkersArray.push({
                            location: centerPt,
                            stopover: true
                        });


                        arr = arr.sort(sortFunc);
                        polygons.push(new google.maps.Polygon({
                            paths: arr,
                            strokeColor: color,
                            strokeOpacity: 0.8,
                            strokeWeight: 2,
                            fillColor: color,
                            fillOpacity: 0.35
                        }));
                        polygons[polygons.length - 1].setMap(map);

                        //map.fitBounds(bounds);

                    }
                    //centroidsMarkersArray.push({
                    //    location: new google.maps.LatLng(36.8271767, 10.14590069999997),
                    //        stopover: true
                    //});
                    //centroidsMarkersArray.push({
                    //    location: new google.maps.LatLng(36.8024303, 10.112447900000006),
                    //    stopover: true
                    //});

              




                },
                error: function (response) {
                    alert("Erreur lors lecture nombre email initial");
                },
                complete: function () {

                }
            });
        });


















            //*************************************************
        $(document).ready(function myPeriodicMethod() {
            $("#typeAlgorithme").change(function () { myPeriodicMethod(); });

            console.log("******************************on ready document(myPeriodicMethod) function executed");
            var x = $("#clusterNumber_input").val();
            if (x == 0) {
                x = 5;
                $("#clusterNumber_input").val(x);
            }
            console.log("x=" + x);

            var y = $("#typeAlgorithme").val();

            console.log("y=" + y);
            


            $.ajax({
                url: "http://localhost:43725/User/GetUserList",
                type: "GET",
                dataType: "json",
                data: { 'clusterNumber': x, 'typeAlgo': y },
                success: function (response) {

                    //console.log(response);
                    deleteMarkers();
                    centroidsMarkersArray = [];
                    directionsDisplay.setMap(null);
                    directionsDisplay = new google.maps.DirectionsRenderer;
                    directionsDisplay.setMap(map);


                    var listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty = _.groupBy(response, function (currentObject) {
                        console.log("function groupBy called");
                        return currentObject.markerColor;
                    });

                    console.log("avant set polygon null");
                    for (var polygon in polygons) {
                        console.log("polygon=" + polygon);
                        polygons[polygon].setMap(null);
                    }

                    i = 0;


                    console.log("listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty=" + JSON.stringify(listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty));
                    
                    for (var color in listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty) {
                        console.log(color);
                        arr = [];
                        var bounds = new google.maps.LatLngBounds();

                        if (listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color] != null)
                            for (var employee in listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])// employee=0 , 1 .... keys correspending to the objects of type employee(Admin)
                            {

                                if ((((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])) != null) {
                                    var lat = (((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])["lat"]);
                                    var lng = (((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])["lng"]);
                                    var location = new google.maps.LatLng(lat, lng);
                                    addMarker(location, i, ((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee]));
                                    arr.push(location);
                                    bounds.extend(location);
                                    console.log("LatLng=" + lat + "/" + lng);
                                    i++;

                                }



                            }
                        centerPt = bounds.getCenter();
                        var centerPtMarker = new google.maps.Marker
                                      ({
                                          position: centerPt,
                                          map: map,
                                      });
                        markers.push(centerPtMarker);

                        centroidsMarkersArray.push({
                            location: centerPt,
                            stopover: true
                        });


                        arr = arr.sort(sortFunc);
                        polygons.push(new google.maps.Polygon({
                            paths: arr,
                            strokeColor: color,
                            strokeOpacity: 0.8,
                            strokeWeight: 2,
                            fillColor: color,
                            fillOpacity: 0.35
                        }));
                        polygons[polygons.length - 1].setMap(map);

                        //map.fitBounds(bounds);

                    }



                },
                error: function (response) {
                    alert("Erreur lors lecture nombre email initial");
                },
                complete: function () {

                }
            });
        });





            google.maps.event.addListener(map, 'click', function (e) {
                var data = JSON.stringify({ 'Lat': e.latLng.lat(), 'Lng': e.latLng.lng() });
                var latitude = e.latLng.lat();
                var longitude = e.latLng.lng();
                $.ajax({
                    type: "POST",
                    url: "/User/GoogleMapLngLatJsonPost",
                    data: data,
                    contentType: 'application/json',
                    success: function (data) {
                        var geocoder = geocoder = new google.maps.Geocoder();
                        geocoder.geocode({ 'latLng': e.latLng }, function (results, status) {
                            if (status == google.maps.GeocoderStatus.OK) {
                                if (results[0]) {



                                    var address = results[0].formatted_address;
                                    var pin = results[0].address_components[results[0].address_components.length - 1].long_name;
                                    var country = results[0].address_components[results[0].address_components.length - 2].long_name;
                                    var state = results[0].address_components[results[0].address_components.length - 3].long_name;
                                    var city = results[0].address_components[results[0].address_components.length - 4].long_name;
                                    var street=extractFromAdress(results[0].address_components, "route");
                                    var house_number = extractFromAdress(results[0].address_components, "street_number");

                                    document.getElementById('lat').value = results[0].geometry.location.lat();
                                    document.getElementById('lng').value = results[0].geometry.location.lng();

                                    document.getElementById('house_number').value = house_number;
                                    document.getElementById('street').value = street;
                                    document.getElementById('country').value = country;
                                    document.getElementById('state').value = state;
                                    document.getElementById('city').value = city;
                                    document.getElementById('zipCode').value = pin;
                                }
                            }
                        });
                    }
                });

            });
        }




</script>